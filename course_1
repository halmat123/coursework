#include <iostream>
#include <unistd.h>
#include <unordered_set>
#include <vector>
#include <chrono>
#include <cstdlib>
#include <set>
#include <iomanip>
#include <string>
#include <cctype>
#include <regex>  
#include <fstream>
#include <sstream>

using namespace std;
using namespace chrono;

const int rows = 6;
const int cols = 6;

void idz_32(int num)
{
    int number_bit;
    cout << "Введите номер бита: ";
    cin >> number_bit;
    num &= ~(1 << number_bit);
    cout << "Число после применения идз: ";
    for (int i = sizeof(int) * 8 - 1; i >=0; i --)
    {
        cout << ((num & (1 << i)) ? "1" : "0");
        if (i == 31 || i % 8 == 0)
        {
            cout << " ";
        }
    }
    cout << '\n';
    cout << "\n";
    cout << "Конечный результат: "<< num << endl;
}




int binarySearch(int arr[], float number, int start, int end) {
    if (end >= start) {
        int mid = start + (end - start) / 2;
        if (arr[mid] == number) {
            return mid;
        }
        if (arr[mid] > number) {
            return binarySearch(arr, number, start, mid - 1);
        } else {
            return binarySearch(arr, number, mid + 1, end);
        }
    }
    return -1; 
}

void quickSort(int arr[],int n ,int end, int start){
    int mid;
    int f = start;
    int l = end;
    mid = arr[(f+l)/2];
    while (f < l){
        while (arr[f] < mid) f++;
        while (arr[l] > mid) l--;
        if (f <= l) {
            swap(arr[f], arr[l]);
            f++;
            l--;
        }
    }
}

void insertionSort(int arr[], int n){
    int i, j, key;
    for (i = 1; i < n; i++){
        key = arr[i];
        j = i - 1;
        while (j >=0 && arr[j] > key){
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void combSort(int arr[], int n){
    float k = 1.247;
    int s;
    s = n-1;
    while (s >= 1){
        for(int i = 0; i + s < n;i ++){
            if (arr[i] > arr[i + s]){
                swap(arr[i], arr[i + s]);
            }
        }
        s/=k;
    }
}

void cocktailSort(int arr[], int n){
    bool swapped = true;
    int start = 0;
    int end = n-1;
    while (swapped){
        swapped = false;
        for(int i  = 0; i < end; i++){
            if (arr[i] >  arr[i + 1]){
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
        if (!swapped){
            break;
        }
        end--;
        for(int i = end - 1;i >= start; i--){
            if (arr[i] > arr[i + 1]){
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }
        start++;
    }
}

void bubbleSort(int arr[], int n) {
    for(int i = 0; i < n ; i++){
        for (int j = 0; j < n - i - 1; j ++){
            if (arr[j] > arr[j + 1]){
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}




void intToFloatMatrix(const int* intMatrix, float* floatMatrix, size_t rows, size_t cols) {
    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < cols; ++j) {
            *(floatMatrix + i * cols + j) = static_cast<float>(*(intMatrix + i * cols + j));
        }
    }
}

void plusNumber(int* arr, int rows, int cols, int n) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(arr + i * cols + j) += n;
        }
    }
}

void minusNumber(int* arr, int rows, int cols, int n) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(arr + i * cols + j) -= n;
        }
    }
}

void multiplyNumber(int* arr, int rows, int cols, int n) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(arr + i * cols + j) *= n;
        }
    }
}

void shareNumber(float* f_arr, int rows, int cols, int n) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(f_arr + i * cols + j) /= n;
        }
    }

    cout << "Измененная матрица: " << endl;
    cout << fixed << setprecision(1); 
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << left << setw(10) << *(f_arr + i * cols + j); 
            usleep(50000);
        }
        cout << endl;
    }
}

void fillSpiral(int* arr, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(arr + i * cols + j) = 1 + rand() % (rows * cols);
        }
    }
}

void straightArray(int(*arr)[cols], int* flatArray) {
    int index = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(flatArray + index++) = *(*(arr + i) + j);
        }
    }
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void quickSortIndicator(int* arr, int start, int end) {
    if (start >= end) return;

    int f = start;
    int l = end;
    int mid = *(arr + (f + l) / 2);

    while (f <= l) {
        while (*(arr + f) < mid) f++;
        while (*(arr + l) > mid) l--;

        if (f <= l) {
            swap(arr + f, arr + l);
            f++;
            l--;
        }
    }
    quickSortIndicator(arr, start, l);
    quickSortIndicator(arr, f, end);

}

void insertionSortIndicator(int* arr, int n) {
    int i, j, key;

    for (i = 1; i < n; i++) {
        key = *(arr + i);
        j = i - 1;

        while (j >= 0 && *(arr + j) > key) {
            *(arr + j + 1) = *(arr + j);
            j--;
        }
        *(arr + j + 1) = key;
    }
}

void combSortIndicator(int* arr, int n) {
    float k = 1.247;
    int s = n - 1;

    while (s >= 1) {
        for (int i = 0; i + s < n; i++) {
            if (*(arr + i) > *(arr + i + s)) {
                swap(*(arr + i), *(arr + i + s));
            }
        }
        s /= k;
    }
}

void cocktailSortIndicator(int* arr, int n) {
    bool swapped = true;
    int start = 0;
    int end = n - 1;

    while (swapped) {
        swapped = false;

        for (int i = start; i < end; i++) {
            if (*(arr + i) > *(arr + i + 1)) {
                swap(*(arr + i), *(arr + i + 1));
                swapped = true;
            }
        }
        if (!swapped) {
            break;
        }
        end--;

        for (int i = end; i >= start; i--) {
            if (*(arr + i) > *(arr + i + 1)) {
                swap(*(arr + i), *(arr + i + 1));
                swapped = true;
            }
        }
        start++;
    }
}

void bubbleSortIndicator(int* arr, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (*(arr + j) > *(arr + j + 1)) {
                swap(*(arr + j), *(arr + j + 1));
            }
        }
    }
}

void fillSpiralSorted(int (*arr)[cols]) {
    int flatArray[rows * cols];

    straightArray(arr, flatArray);
    quickSortIndicator(flatArray,0, rows * cols - 1);

    int index = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            *(*(arr + i) + j) = *(flatArray + index++);
        }
    }
}

void setCursorPosition(int x, int y) {
    cout << "\033[" << y << ";" << x << "H";
}

void printMatrix(int arr[][cols], int rows, int cols) {
    int* ptr = (int*)arr; 

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << *(ptr + i * cols + j) << " ";
            usleep(50000);   
        }
        cout << endl;
    }
}

void printSpiral(int arr[][cols], int rows, int cols) {
    system("clear");
    int top = 0, bottom = rows - 1;
    int left = 0, right = cols - 1;
    
    int* ptr = (int*)arr;

    while (top <= bottom && left <= right) {
        for (int i = left; i <= right; i++) {
            setCursorPosition(i * 4, top + 1);
            cout << *(ptr + top * cols + i);
            cout.flush();
            usleep(300000);
        }
        top++;

        for (int i = top; i <= bottom; i++) {
            setCursorPosition(right * 4, i + 1);
            cout << *(ptr + i * cols + right); 
            cout.flush();
            usleep(300000);
        }
        right--;

        if (top <= bottom) {
            for (int i = right; i >= left; i--) {
                setCursorPosition(i * 4, bottom + 1);
                cout << *(ptr + bottom * cols + i);
                cout.flush();
                usleep(300000);
            }
            bottom--;
        }

        if (left <= right) {
            for (int i = bottom; i >= top; i--) {
                setCursorPosition(left * 4, i + 1);
                cout << *(ptr + i * cols + left);
                cout.flush();
                usleep(300000);
            }
            left++;
        }
    }
    
    setCursorPosition(0, rows + 2);
}

void printSnake(int arr[][cols], int rows, int cols) {
    system("clear");
    
    int* ptr = (int*)arr;

    for (int j = 0; j < cols; j++) {
        if (j % 2 == 0) {
            for (int i = 0; i < rows; i++) {
                setCursorPosition(j * 4, i + 1);
                cout << *(ptr + i * cols + j); 
                cout.flush();
                usleep(150000);
            }
        } else {
            for (int i = rows - 1; i >= 0; i--) {
                setCursorPosition(j * 4, i + 1);
                cout << *(ptr + i * cols + j);
                cout.flush();
                usleep(300000);
            }
        }
    }
    
    setCursorPosition(0, rows + 2);
}

void change_A(int (*arr)[cols])
{
    int blockSize = rows / 2;
    int temp[rows][cols];
    for (int i = 0; i < blockSize; ++i) {
        for (int j = 0; j < blockSize; ++j) {
            *(*(temp + i) + (j + blockSize)) = *(*(arr + i) + j);
            *(*(temp + (i + blockSize)) + (j + blockSize)) = *(*(arr + i) + (j + blockSize));
            *(*(temp + (i + blockSize)) + j) = *(*(arr + (i + blockSize)) + (j + blockSize));
            *(*(temp + i) + j) = *(*(arr + (i + blockSize)) + j);
        }
    }
    for (int i = 0; i < rows; ++i)
    {
        for (int j = 0; j < cols; ++j)
        {
            *(*(arr + i) + j) = *(*(temp + i) + j);
        }
    }
}

void change_B(int (*arr)[cols]) {
    int blockSize = rows / 2;
    int new_arr[rows][cols];

    for (int i = 0; i < blockSize; ++i) {
        for (int j = 0; j < blockSize; ++j) {
            *(*(new_arr + (i + blockSize)) + (j + blockSize)) = *(*(arr + i) + j);
            *(*(new_arr + i) + j) = *(*(arr + (i + blockSize)) + (j + blockSize));
            *(*(new_arr + (i + blockSize)) + j) = *(*(arr + i) + (j + blockSize));
            *(*(new_arr + i) + (j + blockSize)) = *(*(arr + (i + blockSize)) + j);
        }
    }
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            *(*(arr + i) + j) = *(*(new_arr + i) + j);
        }
    }
}

void change_C(int (*arr)[cols]) {
    int blockSize = rows / 2;
    int new_arr[rows][cols];
    for (int i = 0; i < blockSize; ++i) {
        for (int j = 0; j < blockSize; ++j) {
            *(*(new_arr + (i + blockSize)) + j) = *(*(arr + i) + j);
            *(*(new_arr + i) + j) = *(*(arr + (i + blockSize)) + j);
            *(*(new_arr + (i + blockSize)) + (j + blockSize)) = *(*(arr + i) + (j + blockSize));
            *(*(new_arr + i) + (j + blockSize)) = *(*(arr + (i + blockSize)) + (j + blockSize));
        }
    }
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            *(*(arr + i) + j) = *(*(new_arr + i) + j);
        }
    }
}

void change_D(int (*arr)[cols]) {
    int blockSize = rows / 2;
    int new_arr[rows][cols];
    for (int i = 0; i < blockSize; ++i) {
        for (int j = 0; j < blockSize; ++j) {
            *(*(new_arr + i) + (j + blockSize)) = *(*(arr + i) + j);
            *(*(new_arr + i) + j) = *(*(arr + i) + (j + blockSize));
            *(*(new_arr + (i + blockSize)) + (j + blockSize)) = *(*(arr + (i + blockSize)) + j);
            *(*(new_arr + (i + blockSize)) + j) = *(*(arr + (i + blockSize)) + (j + blockSize));
        }
    }
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            *(*(arr + i) + j) = *(*(new_arr + i) + j);
        }
    }
}





unordered_map<char, int> createBadCharTable(const string& pattern) {
    unordered_map<char, int> badCharTable;
    int length = pattern.length();

    for (int i = 0; i < length; ++i) {
        badCharTable[pattern[i]] = i;
    }

    return badCharTable;
}

vector<int> boyerMooreSearch(const string& text, const string& pattern) {
    vector<int> positions;
    int textLength = text.length();
    int patternLength = pattern.length();

    if (patternLength == 0 || textLength < patternLength) {
        return positions;
    }

    auto badCharTable = createBadCharTable(pattern);
    int shift = 0;

    while (shift <= textLength - patternLength) {
        int j = patternLength - 1;

        while (j >= 0 && pattern[j] == text[shift + j]) {
            j--;
        }

        if (j < 0) {
            positions.push_back(shift);
            shift += (shift + patternLength < textLength) ? 
                    patternLength - badCharTable[text[shift + patternLength]] : 1;
        } else {
            shift += max(1, j - badCharTable[text[shift + j]]);
        }
    }

    return positions;
}

string removeCharacters(const string& word, const string& charsToRemove) {
    string result;
    for (char ch : word) {
        if (charsToRemove.find(ch) == string::npos) { 
            result += ch;
        }
    }
    return result; 
}

bool containsDigits(const string& word) {
    for (char ch : word) {
        if (isdigit(ch)) {
            return true; 
        }
    }
    return false; 
}

string toLowerCase(const string& input) {
    stringstream ss(input);
    string word;
    string result;

    
    while (ss >> word) {
        
        for (char& ch : word) {
            ch = tolower(ch);
        }

        if (!result.empty()) {
            result += " ";
        }
        result += word;
    }

    return result;
}

string removeExtraPunctuation(const string& input) {
    stringstream ss(input);
    string result;
    char lastChar = '0'; 
    int dotCount = 0;
    string punctuation = "!#$%&'()*+,-./:;<=>?@[^_{|}~";

    for (char currentChar : input) {
        if (punctuation.find(currentChar) != string::npos) {
            if (currentChar == '.') {
                dotCount++;
                if (dotCount <= 3) {
                    result += currentChar;
                }
                continue; 
            } else {
                dotCount = 0;                
                if (currentChar == lastChar) {
                    continue;
                }
            }
        } else {
            dotCount = 0;
        }

        result += currentChar;
        lastChar = currentChar;
    }

    return result;
}

string removeExtraSpaces(const string& input) {
    stringstream ss(input);
    string word;
    string result;

    while (ss >> word) {
        if (!result.empty()) {
            result += " ";
        }
        result += word;
    }

    return result;
}

bool isValidInput(const string& input, vector<string>& words) {
    if (input.empty() || input.back() != '.') {
        cout << "Ввод должен заканчиваться точкой." << endl;
        return false;
    }

    string trimmedInput = input.substr(0, input.size() - 1);

    istringstream iss(trimmedInput);
    string word;

    while (iss >> word) {

        if (word.length() < 1 || word.length() > 10) {
            cout << "Каждое слово должно содержать от 1 до 10 символов." << endl;
            return false;
        }
        
        words.push_back(word);
    }

    if (words.size() < 1 || words.size() > 50) {
        cout << "Количество слов должно быть от 1 до 50." << endl;
        return false;
    }

    return true;
}

string inputFromKeyboard() {
    string userInput;
    cout << "Введите последовательность слов (завершите точкой): ";
    getline(cin, userInput);
    return userInput;
}

string inputFromFile() {
    string filename;
    cout << "Введите имя файла: ";
    cin >> filename;

    ifstream file(filename);
    if (!file) {
        cout << "Файл не найден. Попробуйте снова." << endl;
        return inputFromFile();
    }

    string content;
    string line;
    while (getline(file, line)) {
        content += line;
    }
    
    return content;
}


int main(){
    system("sleep");
    bool flagPractical = true;
    while (flagPractical){
        cout << "Введите номмер практической работы (1-4): ";
        int taskPractical;
        cin >> taskPractical;
        switch(taskPractical){
            case 1:{
            unsigned int mask = 1 << (sizeof(int) * 8 - 1);
            int number, answer_int, answer_float, answer_double;
            bool flag_1 = true;

            while(flag_1){
                cout << "Введите номер задания(1-4, 5 - завершение программы): ";
                cin >> number;
                cout << "\n";
                switch (number){
                    case 1:{
                        cout << "int: " << sizeof(int) << " байт\n";
                        cout << "short int: " << sizeof(short int) << " байт\n";
                        cout << "long int: " << sizeof(long int) << " байт\n";
                        cout << "float: " << sizeof(float) << " байт\n";
                        cout << "double: " << sizeof(double) << " байт\n";
                        cout << "long double: " << sizeof(long double) << " байт\n";
                        cout << "char: " << sizeof(char) << " байт\n";
                        cout << "bool: " << sizeof(bool) << " байт\n";
                        cout << "\n";
                        break;
                    }
                    case 2:{
                    cout << "Введите int значение: ";
                    int a;
                    cin >> a;
                    mask = 1 << (sizeof(int) * 8 - 1);
                    for (int i = 1; i <= sizeof(int) * 8; i++, mask >>= 1) {
                        if (i == 1) {
                            cout << "\033[31m";
                            cout << (a & mask ? "1" : "0");
                            cout << "\033[0m";
                        }
                        if (i != 1) {
                            if (a & mask) {
                                cout << "1";
                            }
                            else {
                                cout << "0";
                            }
                        }
                        if (i == 1 || i % 8 == 0) {
                            cout << " ";
                        }
                    }
                    cout << "\n";
                    cout << "\n";
                    cout << "Желаете применить идз к данному числу? (1 - да, 0 - нет): ";
                    cin >> answer_int;
                    if (answer_int == 1)
                    {
                        idz_32(a);
                    }
                    else
                    {
                        break;
                    }
                    cout << '\n';
                    break;
                }
                    case 3:{
                    union{
                            float b;
                            int ib;
                        };
                        cout << "Введите значение float: ";
                        cin >> b;
                        mask = 1 << (sizeof(float) * 8 - 1);
                        for (int i = 1; i <= sizeof(float) * 8; i++, mask >>= 1) {
                            if (i == 1) {
                                cout << "\033[35m";
                                cout << (ib & mask ? "1" : "0");
                                cout << "\033[0m";
                            }
                            if (i >=2 && i <= 8) {
                                cout << "\033[31m";
                                cout << (ib & mask ? "1" : "0");
                                cout << "\033[0m";
                            }
                            if (i  > 8) {
                                if (ib & mask) {
                                    cout << "1";
                                }
                                else {
                                    cout << "0";
                                }
                            }
                            if (i == 1 || i % 8 == 0) {
                                cout << " ";
                            }
                        }
                        cout << "\n";
                        cout << "\n";
                        cout << "Желаете применить идз к данному числу? (1 - да, 0 - нет): ";
                        cin >> answer_float;
                        if (answer_float == 1)
                        {
                            idz_32(ib);
                        }
                        else
                        {
                            break;
                        }
                        break;
                    }
                    case 4:{
                    union 
                        {
                            double idouble;
                            int massiv[2];
                        };
                        cout << "Введите значение double: ";
                        cin >> idouble;
                        int count = 0;
                        string izm_double;
                        for (int i = 1; i >= 0;i--){
                            unsigned int mask = 1 << (sizeof(float) * 8 - 1);
                            for (int k = 1; k <= 32; k++,mask >>= 1){
                                count++;
                                if (count == 1)
                                {
                                    cout << "\033[32m";
                                    cout << (massiv[i] & mask ? "1" : "0");
                                    cout << "\033[0m";
                                }
                                if (count > 1 && count <= 11)
                                {
                                    cout << "\033[33m";
                                    cout << (massiv[i] & mask ? "1" : "0");
                                    cout << "\033[0m";
                                }
                                if (count > 11)
                                {
                                    cout << "\033[35m";
                                    cout << (massiv[i] & mask ? "1" : "0");
                                    cout << "\033[0m";
                                }
                                if (count == 1 || count == 11)
                                {
                                    cout << " ";                                
                                }
                            }
                        }

                        cout << "\n";
                        cout << "\n";
                        cout << "Желаете применить идз к данному числу? (1 - да, 0 - нет): ";
                        cin >> answer_double;
                        if (answer_double == 1)
                        {
                        {
                            if (idouble < 0)
                        {
                            for (int i = 0; i < 2; i++)
                            {
                                for (int j = 0; j < sizeof(int) * 8;j+=2)
                                {
                                    massiv[i] &= ~(1 << j);
                                }
                            }
                        }
                            else
                            {
                                for (int i = 0; i < 2; i++)
                            {
                                for (int j = 1; j < sizeof(int) * 8;j+=2)
                                {
                                    massiv[i] |= (1 << j);
                                }
                            }
                            }
                        int n = 0;
                        for (int i = 1; i >= 0; i--)
                        {
                            unsigned mask = 1 << 31;
                            for(int j = 1; j <= 32; j++)
                            {
                                cout << (massiv[i] & mask ? "1":"0");
                                n+=1;
                                mask >>= 1;
                                if (n == 1 || n == 11)
                                {
                                    cout << " ";
                                }
                            }
                        }
                        cout << '\n';
                        cout << "Конечный результат: "<< idouble << endl;
                        cout <<'\n';
                        }
                        }
                        else
                        {
                            break;
                        }
                        break;
                }
                    case 5:{
                        flag_1 = false;
                        break;
                    }
                    default:{
                            cout << "Неверный номер задания." << endl;
                            break;
                        }
                }
            }
        }
            case 2:{
                const int n = 100;
                int arr[n];
                int originalArr[n]; 
                srand(static_cast<unsigned>(time(0)));
                int count_task = 0;
                int max_number = arr[0];
                int min_number = arr[0];
                bool flag = true;
                bool flag_sort = false;
                system("clear");
                while (flag){
                    int task;
                    cout << "\n\nВыберите номер задания(1-8) (9 - завершение программы) (10 - идз): ";
                    cin >> task;
                    switch(task){
                        case 1:{
                        for (int i = 0; i < n; ++i) {
                            arr[i] = -99 + (rand() % 199);
                            originalArr[i] = arr[i];
                        }
                            cout << "\nМассив до сортировки: ";
                            for (int i = 0; i < n; i++){
                                cout << arr[i] << " ";
                            }
                            count_task++;
                            max_number = 0;
                            min_number = 99;
                            for (int i = 1; i < n; ++i) {
                                if (arr[i] > max_number) max_number = arr[i];
                                if (arr[i] < min_number) min_number = arr[i];
                            }
                            break;
                        }  
                        case 2:{
                            if (count_task == 0){
                                cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                break;
                            }
                            auto start = steady_clock::now();
                            cocktailSort(arr,n);
                            auto end = steady_clock::now();
                            auto result_sort = duration_cast<nanoseconds>(end - start);

                            cout << "\n\nМассив после сортировки: ";
                            for (int i = 0; i < n; i++){
                                cout << arr[i] << " ";
                            }
                            cout <<"\n\nВремя сортировки в наносекундах = " <<result_sort.count();
                            flag_sort = true;
                            break;
                        }
                        case 3:{
                            if (count_task == 0){
                                cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                break;
                            }
                            cout << "\n\nВыберите в каком массиве производить поиск(1-сорт/0-несорт)";
                            int choice;
                            cin >> choice;
                            if (choice == 1){
                                auto start_search_sort = steady_clock::now();
                                max_number = arr[99];
                                min_number = arr[0];
                                auto end_search_sort = steady_clock::now();
                                auto result_search_sort = duration_cast<nanoseconds>(end_search_sort - start_search_sort);
                                cout << "\n\nНаибольший элемент массива(сорт): "<< max_number;
                                cout << "\nНаименьший элемент массива(сорт): "<< min_number;
                                cout << "\n\nВремя поиска макс и мин элементов в отсортированном массиве = " << result_search_sort.count() << " наносекунд";
                            }
                            else{
                                /*
                                for(int i = 0; i < 100; i++){
                                    cout << originalArr[i]<<" ";
                                }
                                */
                                int max_number = originalArr[0];
                                int min_number = originalArr[0];
                                auto start_search_sort = steady_clock::now();
                                for (int number : originalArr) {
                                    if (number > max_number) max_number = number;
                                    if (number < min_number) min_number = number;
                                }
                                auto end_search_sort = steady_clock::now();
                                auto result_search_sort = duration_cast<nanoseconds>(end_search_sort - start_search_sort);
                                cout << "\n\nНаибольший элемент массива(несорт): "<< max_number;
                                cout << "\nНаименьший элемент массива(несорт): "<< min_number;
                                cout << "\n\nВремя поиска макс и мин элементов в отсортированном массиве = " << result_search_sort.count() << " наносекунд";
                                }
                            break;
                        }          
                        case 4:{
                            if (count_task == 0) {
                            cout << "nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                            break;
                        }

                        cout << "Выберите в каком массиве хотите произвести поиск(1-сорт/0-несорт): ";
                        int choice_4;
                        cin >> choice_4;

                        if (choice_4 == 1) {
                            int mid_num_sort = (max_number + min_number) / 2.0;
                            cout << "\n\nСреднее значение макс и мин элементов в отсортированном массиве = " << mid_num_sort;

                            vector<int> indices;
                            auto start_index_search_sort = steady_clock::now();

                            int found_index = binarySearch(arr, mid_num_sort, 0, n - 1);
                            
                            if (found_index == -1) {
                                cout << "\nЭлемент не найден в массиве!" << endl;
                                break;
                            }

                            
                            for (int i = found_index - 1; i >= 0 && arr[i] == mid_num_sort; i--) {
                                indices.push_back(i);
                            }
                            indices.push_back(found_index);
                            for (int i = found_index + 1; i < n && arr[i] == mid_num_sort; i++) {
                                indices.push_back(i);
                            }

                            auto end_index_search_sort = steady_clock::now();
                            auto result_index_search_sort = duration_cast<nanoseconds>(end_index_search_sort - start_index_search_sort);

                            cout << "\n\nИндексы элементов среднего значения(сорт) = ";
                            for (int ind : indices) {
                                cout << ind << " ";
                            }
                            cout << "\nИх кол-во = " << indices.size() << endl;
                            cout << "\n\nВремя поиска индексов среднего значения в отсортированном массиве = " << result_index_search_sort.count() << " наносекунд";
                            break;
                        }

                            if (choice_4 == 0){
                                float mid_num_unsort = (max_number + min_number) / 2.0; 
                                cout << "\n\nСреднее значение макс и мин элементов в неотсортированном массиве = " << mid_num_unsort;
                                vector<int> indeces;
                                auto start_index_search_unsort = steady_clock::now();
                                int count_mid = 0;
                                for (int i = 0; i < n; i++) {
                                    if (mid_num_unsort == originalArr[i]){
                                        indeces.push_back(i);
                                        count_mid++;
                                    }
                                }
                                auto end_index_search_unsort = steady_clock::now();
                                auto result_index_search_unsort = duration_cast<nanoseconds>(end_index_search_unsort - start_index_search_unsort);
                                cout << "\n\nИндексы элементов среднего значения(несорт) = ";
                                for (int ind : indeces) {
                                    cout << ind << " ";
                                }
                                cout << "\nИх кол-во = "<<count_mid << endl;
                                cout << "\n\nВремя поиска индексов среднего значения в неотсортированном массиве = " << result_index_search_unsort.count() << " наносекунд";
                                break;
                        }
                            
                            }
                        case 5:{
                            if (count_task == 0){
                                cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                break;
                            }
                            int a;
                            cout << "\nВведите число a ";
                            cin >> a;
                            int count_a = 0;
                            unordered_set<int> unique_numbers;
                        
                            for (int i = 0; i < n; i++) {
                                if (arr[i] < a) {
                                    unique_numbers.insert(arr[i]);
                                }
                            }
                            count_a = unique_numbers.size();
                            cout << "\n\nКол-во чисел в массиве, которые меньше введенного числа a = " << count_a<< endl;
                            break;
                        }
                        case 6:{
                            if (count_task == 0){
                                cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                break;
                            }
                            int b;
                            cout << "\nВведите число b ";
                            cin >> b;
                            int count_b = 0;
                            unordered_set<int> unique_numbers;
                            
                                for (int i = 0; i < n; i++) {
                                    if (arr[i] > b) {
                                        unique_numbers.insert(arr[i]);
                                    }
                                }

                                count_b = unique_numbers.size();
                            cout << "\n\nКол-во чисел в массиве, которые больше введенного числа b = " << count_b << endl;
                            break;
                        }
                        case 7:{
                            if (count_task == 0){
                                cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                break;
                            }
                            cout << "\n\nВведите число для нахождения его при помощи бинарного поиска: ";
                            int number;
                            cin >> number;
                            auto binary_searchnumber = steady_clock::now();
                            binarySearch(arr, number,0,n-1);
                            auto binary_searchnumber_end = steady_clock::now();
                            auto binary_searchnumber_time = duration_cast<nanoseconds>(binary_searchnumber_end - binary_searchnumber);
                            if (binarySearch(arr, number,0,n-1)){
                                cout << "\nЭлемент есть в массиве(бинарный)!"<< endl;
                            }
                            else{
                                cout << "\nЭлемент не найден в массиве(бинарный)!"<< endl;
                            }
                            cout << "Время выполнения бинарного поиска = " << binary_searchnumber_time.count() << " наносекунд";
                            bool flag = false;
                            auto searchnumber = steady_clock::now();
                            for (int i; i< n;i++){
                                if (arr[i] == number){
                                    flag = true;
                                    break;
                                }
                            }
                            auto searchnumber_end = steady_clock::now();
                            auto searchnumber_time = duration_cast<nanoseconds>(searchnumber_end - searchnumber);
                            if (flag){
                                cout << "\n\nЭлемент есть в массиве!"<< endl;
                            }
                            else{
                                cout << "\n\nЭлемент не найден в массиве!"<< endl;
                            }
                            cout << "Время выполнения переборного поиска = " << searchnumber_time.count() << " наносекунд";
                            flag = false;
                            break;
                        }
                        case 8:{
                            if (count_task == 0){
                                    cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                    break;
                                }
                            cout << "\n\nВведите индексы чисел, которые стоит поменять местами: ";
                            int index1, index2;
                            cin >> index1 >> index2;
                            auto swap_time = steady_clock::now();
                            swap(arr[index1], arr[index2]);
                            auto swap_end = steady_clock::now();
                            auto swap_duration = duration_cast<nanoseconds>(swap_end - swap_time);
                            cout << "\n\nМассив после замены элементов: ";
                            for (int i = 0; i < n; i++){
                                cout << arr[i] << " ";
                            }
                            cout << "\n\nВремя замены элементов местами = " << swap_duration.count() << " наносекунд";
                            break;
                        }
                        case 9:{
                            flag = false;
                            break;}
                        case 10:{
                        if (count_task == 0){
                                cout << "\nМассив ещё не был сгенерирован! Попробуйте еще раз!";
                                break;
                            }
                        cout << "Введите с каким массивом хотите работать: (1 - сорт/0 - несорт): ";
                        int answer_idz;
                        cin >> answer_idz;
                        if (answer_idz == 1){
                            if (flag_sort == false){
                                cout << "Массив еще не был отсортирован, попробуйте снова!";
                                break;
                            }
                            int idz_number;
                            cout << "Введите на какое значение будем уменшать каждый нечетный элемент: " << endl;
                            cin >> idz_number;
                            for (int i = 0; i < n; ++i) {
                                if(i % 2 != 0){
                                    arr[i] -= idz_number;
                                }
                            }
                            cout << "Массив после уменьшения: " << endl;
                            for (int i = 0; i < n; ++i) {
                                cout << arr[i] << " ";
                            }
                            for (int i = 0; i < n; ++i){
                                if (i % 2 != 0){
                                    arr[i] = arr[i] * (rand() % 9 + 1);
                                }
                            }
                            cout << '\n';
                            cout << "Массив после умножение: " << endl;
                            for (int i = 0; i < n; ++i) {
                                cout << arr[i] << " ";
                            }
                            vector <int>counts(10,0); //10 элементов и все равны 0
                            for(int i  = 0; i < n; ++i){
                                for (int j = 1; j < 10; ++j){
                                    if(arr[i] % j == 0){
                                        counts[j]++;
                                    }
                                }
                            }
                            for(int i  = 1; i < 10; i++){
                                cout << "\nКол-во элементов, которые нацело делятся на "<< i << " равно: "<< counts[i] << endl;
                            }
                        }
                        if (answer_idz == 0){
                            int idz_number;
                            cout << "Введите на какое значение будем уменшать каждый нечетный элемент: " << endl;
                            cin >> idz_number;
                            for (int i = 0; i < n; ++i) {
                                if(i % 2 != 0){
                                    originalArr[i] -= idz_number;
                                }
                            }
                            cout << "Массив после уменьшения: " << endl;
                            for (int i = 0; i < n; ++i) {
                                cout << originalArr[i] << " ";
                            }
                            for (int i = 0; i < n; ++i){
                                if (i % 2 != 0){
                                    originalArr[i] = originalArr[i] * (rand() % 9 + 1);
                                }
                            }
                            cout << '\n';
                            cout << "Массив после умножение: " << endl;
                            for (int i = 0; i < n; ++i) {
                                cout << originalArr[i] << " ";
                            }
                            vector <int>counts(10,0);
                            for(int i  = 0; i < n; ++i){
                                for (int j = 1; j < 10; ++j){
                                    if(originalArr[i] % j == 0){
                                        counts[j]++;
                                    }
                                }
                            }
                            for(int i  = 1; i < 10; i++){
                                cout << endl;
                                cout << "\nКол-во элементов, которые нацело делятся на "<< i << " равно: "<< counts[i] << endl;
                            }
                        }
                    }
                        default:{
                            cout << "Неверный номер задания." << endl;
                            break;
                        }
                }
            }
            }
            case 3:{
                int arr[rows][cols];
                float f_arr[rows][cols];
                system ("clear");
                bool flag = true;
                while (flag) {
                    cout << endl;
                    cout << "Введите номер задания (1-4, 5 - завершение программы): ";
                    int task;
                    cin >> task;
                    cout << endl;
                    switch(task){
                        case 1:{
                            cout << "Выберите вывод (1 - спираль, 2 - змейка): ";
                            int conclusion;
                            cin >> conclusion;
                            fillSpiral(&arr[0][0], rows, cols);
                            if(conclusion == 1){
                                printSpiral(arr, rows, cols);
                            } else {
                                printSnake(arr, rows, cols);
                            }
                            break;
                        }
                        case 2:{
                            cout<<"Выберите перестановку(1/2/3/4): ";
                            int permutation;
                            cin >> permutation;
                            if (permutation == 1){
                                cout << endl << endl;
                                cout << "Поворот блоков:\n"; 
                                usleep(2000000);
                                change_A(arr);
                                printMatrix(arr, rows, cols);
                            }
                            if (permutation == 2){
                                cout << endl << endl;
                                cout << "Поворот блоков:\n"; 
                                usleep(2000000);
                                change_B(arr);
                                printMatrix(arr, rows, cols);
                            }
                            if (permutation == 3){
                                cout << endl << endl;
                                cout << "Поворот блоков:\n"; 
                                usleep(2000000);
                                change_C(arr);
                                printMatrix(arr, rows, cols);
                            }
                            if (permutation == 4){
                                cout << endl;
                                cout << "Поворот блоков:\n"; 
                                usleep(2000000);
                                change_D(arr);
                                printMatrix(arr, rows, cols);
                            }
                            break;
                        }
                        case 3:{
                            cout << "Отсортированный массив: "<< endl;
                            fillSpiralSorted(arr);
                            printMatrix(arr, rows, cols);
                            break;
                        }
                        case 4:{
                            cout << "Выберите действие (1 - плюс, 2 - минус, 3 - умножение, 4 - деление): ";
                            int operation;
                            cin >> operation;
                            cout << endl;
                            if (operation == 1){
                                cout << "Ввдеите число, на которое увеличится каждое число матрицы: ";
                                int n;
                                cin >> n;
                                plusNumber(&arr[0][0], rows, cols, n);
                                cout << "Измененная матрица: " << endl;
                                printMatrix(arr, rows, cols);
                            }
                            if (operation == 2){
                                cout << "Ввдеите число, на которое уменьшится каждое число матрицы: ";
                                int n;
                                cin >> n;
                                minusNumber(&arr[0][0], rows, cols, n);
                                cout << "Измененная матрица: " << endl;
                                printMatrix(arr, rows, cols);
                            }
                            if (operation == 3){
                                cout << "Ввдеите число, на которое умножится каждое число матрицы: ";
                                int n;
                                cin >> n;
                                multiplyNumber(&arr[0][0], rows, cols, n);

                                cout << "Измененная матрица: " << endl;
                                printMatrix(arr, rows, cols);
                            }
                            if (operation == 4){
                                cout << "Ввдеите число, на которое поделится каждое число матрицы: ";
                                int n;
                                cin >> n;
                                intToFloatMatrix(&arr[0][0], &f_arr[0][0], rows, cols);
                                shareNumber(&f_arr[0][0], rows, cols, n);
                            }
                            
                        }
                        case 5:{
                            flag = false;
                            break;
                        }
                        default:{
                            cout << "Неверный номер задания." << endl;
                            break;
                        }
                    }
                }
            }
            case 4:{
                int choice;
                vector<string> words;
                string userInput; 
                string editedInput;
                bool flag = true;
                string cleanedInput;
                system("clear");
                while (flag) {
                    cout << endl;
                    cout << "Введите номер задания(1 - 4): ";
                    cin >> choice;
                    cout << endl;
                    cin.ignore();

                    switch (choice) {
                        case 1: {
                            int user_choice;
                            cout << "Выберите способ ввода текста(1 - с клавиатуры, 2 - из файла): ";
                            cin >> user_choice;
                            cin.ignore();

                            if (user_choice == 1) {
                                userInput = inputFromKeyboard(); 
                            } else if (user_choice == 2) {
                                userInput = inputFromFile();
                            } else {
                                cout << "Неверный выбор. Пожалуйста, попробуйте снова." << endl;
                                return 0;
                            }

                            if (isValidInput(userInput, words)) {
                                cout << "Введенные слова: ";
                                for (const auto& word : words) {
                                    cout << word << " ";
                                }
                                cout << endl;
                            } else {
                                cout << "Нет корректных слов для вывода." << endl;
                            }
                            break;
                        }
                        case 2: {
                            editedInput = removeExtraSpaces(userInput);
                            editedInput = removeExtraPunctuation(editedInput);
                            editedInput = toLowerCase(editedInput);
                            cout << "Отредактированный текст: " << editedInput << endl;
                            break;
                        } 
                        case 3: {
                            string charsToRemove;
                            cout << "Введите набор символов для удаления: ";
                            getline(cin, charsToRemove);
                            cout << "Введенные слова (без цифр и с удаленными символами): ";
                            vector<string> editedWords;
                            istringstream iss(editedInput);
                            string word;
                            while (iss >> word) {
                                editedWords.push_back(word);
                            }
                            for (const auto& word : editedWords) {
                                if (!containsDigits(word)) { 
                                    string cleanedWord = removeCharacters(word, charsToRemove);
                                    cleanedInput += cleanedWord + " "; 
                                    cout << cleanedWord << " "; 
                                }
                            }
                            cout << endl;
                            break;
                        }
                        case 4:{
                            string substring;
                            cout << "Введите подстроку для поиска: ";
                            getline(cin, substring);

                            vector<int> bmPositions = boyerMooreSearch(cleanedInput, substring);
                            cout << "Результаты поиска Бойера-Мура: ";
                            for (int pos : bmPositions) {
                                cout << pos << " ";
                            }
                            cout << endl;
                            break;
                        }
                        default:{
                            cout << "Неверный номер задания." << endl;
                            break;
                        }
                    }
                }   
            }
            default:{
                cout << "Неверный номер задания." << endl;
                break;
            }
        }  
    }
}
